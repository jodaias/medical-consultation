// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(dbgenerated("gen_random_uuid()"))
  email         String   @unique
  password      String
  name          String
  phone         String?
  dateOfBirth   DateTime?
  gender        Gender?
  userType      UserType @default(PATIENT)
  isVerified    Boolean  @default(false)
  isActive      Boolean  @default(true)
  profileImage  String?

  fcmToken      String?  // Token FCM para notificações push

  // Security fields
  loginAttempts Int      @default(0)
  isLocked      Boolean  @default(false)
  lockoutUntil  DateTime?
  lastLoginAt   DateTime?
  passwordChangedAt DateTime?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Doctor specific fields
  doctorProfile DoctorProfile?

  // Patient specific fields
  patientProfile PatientProfile?

  // Relations
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  patientConsultations Consultation[] @relation("PatientConsultations")
  doctorConsultations Consultation[] @relation("DoctorConsultations")
  schedules       Schedule[]
  doctorPrescriptions Prescription[] @relation("DoctorPrescriptions")
  patientPrescriptions Prescription[] @relation("PatientPrescriptions")
  ratings         Rating[]
  receivedRatings Rating[] @relation("DoctorRatings")
  reports         Report[]

  favorites       Favorite[] @relation("FavoriteUser")
  favoritedBy     Favorite[] @relation("FavoriteDoctor")

  @@map("users")
}

model DoctorProfile {
  id              String   @id @default(dbgenerated("gen_random_uuid()"))
  userId          String   @unique
  crm             String   @unique
  specialty       String
  experience      Int      // years of experience
  education       String[]
  certifications  String[]
  bio             String?
  consultationFee Decimal  @db.Decimal(10, 2)
  availability    Json     // Store availability as JSON
  isAvailable     Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("doctor_profiles")
}

model PatientProfile {
  id              String   @id @default(dbgenerated("gen_random_uuid()"))
  userId          String   @unique
  emergencyContact String?
  allergies       String[]
  medicalHistory  String?
  currentMedications String[]
  insurance       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("patient_profiles")
}

model Favorite {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  userId     String
  doctorId   String
  createdAt  DateTime @default(now())

  user       User     @relation("FavoriteUser", fields: [userId], references: [id])
  doctor     User     @relation("FavoriteDoctor", fields: [doctorId], references: [id])
}

model Consultation {
  id          String @id @default(dbgenerated("gen_random_uuid()"))
  patientId   String
  doctorId    String
  status      ConsultationStatus @default(SCHEDULED)
  scheduledAt DateTime
  startedAt   DateTime?
  endedAt     DateTime?
  notes       String?
  symptoms    String?
  diagnosis   String?
  prescription String?
  rating       Float?
  review       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  patient User @relation("PatientConsultations", fields: [patientId], references: [id])
  doctor  User @relation("DoctorConsultations", fields: [doctorId], references: [id])
  messages Message[]
  prescriptions Prescription[]

  @@map("consultations")
}

model Message {
  id             String @id @default(dbgenerated("gen_random_uuid()"))
  consultationId String
  senderId       String
  receiverId     String
  content        String
  messageType    MessageType @default(TEXT)
  isRead         Boolean  @default(false)
  createdAt      DateTime @default(now())

  consultation Consultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  sender      User        @relation("SentMessages", fields: [senderId], references: [id])
  receiver    User        @relation("ReceivedMessages", fields: [receiverId], references: [id])

  @@map("messages")
}

model Schedule {
  id            String @id @default(dbgenerated("gen_random_uuid()"))
  doctorId      String
  dayOfWeek     Int      // 0-6 (Sunday-Saturday)
  startTime     String   // Format: "HH:MM"
  endTime       String   // Format: "HH:MM"
  consultationDuration Int // duração em minutos
  isAvailable   Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  doctor User @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@map("schedules")
}

model Prescription {
  id             String @id @default(dbgenerated("gen_random_uuid()"))
  consultationId String
  doctorId       String
  patientId      String
  medications    Json     // Array of medications
  instructions   String
  dosage         String
  duration       String
  isActive       Boolean  @default(true) // Indica se a prescrição está ativa
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  consultation Consultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  doctor      User        @relation("DoctorPrescriptions", fields: [doctorId], references: [id])
  patient     User        @relation("PatientPrescriptions", fields: [patientId], references: [id])

  @@map("prescriptions")
}

model Rating {
  id             String @id @default(dbgenerated("gen_random_uuid()"))
  patientId      String
  doctorId       String
  consultationId String?
  rating         Int      // 1-5 stars
  comment        String?
  createdAt      DateTime @default(now())

  patient      User        @relation(fields: [patientId], references: [id])
  doctor       User        @relation("DoctorRatings", fields: [doctorId], references: [id])

  @@map("ratings")
}

model Report {
  id         String  @id @default(dbgenerated("gen_random_uuid()"))
  userId     String
  reportType ReportType
  startDate  DateTime
  endDate    DateTime
  filters    Json?
  format     FormatType   @default(PDF)
  status     ReportStatus   @default(PENDING)
  fileUrl    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reports")
}

enum ReportType {
  CONSULTATION
  FINANCIAL
  PATIENT
  RATING
  PRESCRIPTION
}

enum FormatType {
 PDF
 CSV
 EXCEL
}

enum ReportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum UserType {
  PATIENT
  DOCTOR
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ConsultationStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  AUDIO
}